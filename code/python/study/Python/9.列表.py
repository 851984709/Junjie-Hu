member = ['你好', 'Hello']
# Python的变量没有数据类型，列表可以存放任意种类的元素

member.append('Как дела')
# 在列表末尾加入一个元素

member2 = ['어떻게 지내니', 'Comment vas-tu']
member.extend(member2)
# 在列表末尾加入一个列表

member.insert(2,'こんにちは')
# 将元素插入到列表的指定位置
# Python的顺序索引从零开始

member.remove('こんにちは')
# 删除列表中指定名字的元素
# 如果列表中没有指定元素，程序就会报错

del member[0]
# del属于语句
# 删除列表中指定索引值（index）的元素
# del语句也可以删除整个列表，如：del member

name = member.pop(1)
# 删除列表中指定索引值（index）的元素,并返回该元素
# 默认删除列表中的最后一个元素，如：member.pop()

member2 = member[1:4]
# 列表的切片（slice）
# 取出列表中从左索引值到右索引值（不包括右索引值）对应的所有元素
# 如果右索引值大于列表的最后一个元素的索引值，则只取到别表的最后一个元素，不报错
# 默认左索引值为0，右索引值为列表最大索引值，如：member[:3],member[1:],member[:]
# 原列表不发生改变

#------------------------------------------------------------------------------#

list1 = [1, 2, 3]
list2 = [2, 3, 4]
list3 = [1, 2, 4]
list1 < list2
list1 < list3
# 列表的比较大小
# 先将第一个元素进行比较，若两元素不同，不对后续元素进行比较，直接这返回结果
# 若第一个元素相同，则接着比较后续元素，依此类推

list1 + list2
list1 * 3
# 列表的拼接（+为拼接操作符）和重复（*为重复操作符）与字符串的拼接和重复类似
# Python不支持列表的减法和除法

1 in list1
'1' not in list1
# 列表成员操作语句
# 判断元素是否在列表中

list1 = [123, ['你好', 234], 'Hello']
# Python的列表中可以包含列表

list1[1]
# 访问列表中的列表和访问列表中的元素操作一样（列表中的列表就是元素）

list1[1][1]
# 访问列表中的列表中的元素（类似与C语言中的二维数组）

'你好' in list1[1]
# 判断元素是否在列表中的列表中，不能用：'你好' in list1

#------------------------------------------------------------------------------#

list1 = [123, '你好', 2, 123, 456, 2, 123]
list1.count(123)
# 返回列表中元素出现的次数

list1.index(123)
# 返回列表中元素出现的第一个索引值，默认起始索引值为0
list1.index(123,2)
# 返回从指定索引值开始，元素出点的第一个索引值
list1.index(123,2,5)
# 返回从左索引值开始，到右索引值（不包括右索引值）为止，元素出现的第一个索引值
# 若列表中无指定元素，则程序报错

list1.reverse()
# 将列表中所有的元素顺序进行翻转

list2 = [3, 1, 4, 1, 5]
list2.sort()
# 将列表中的元素进行排序，默认按照从小到大的顺序
list2.sort(reverse = True)
# 将列表中的元素进行重大到小的排序

#------------------------------------------------------------------------------#

list3 = list1[:]
# 列表的拷贝
# list1 的值改变，list3 的值不变

list4 = list1
# 直接将 list1 的地址赋值给 list4
# list1 的值改变，list4 的值也会跟着改变
